# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AgtAgent',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='agentID')),
                ('divisionID', models.SmallIntegerField(null=True, blank=True)),
                ('corporationID', models.BigIntegerField(null=True, blank=True)),
                ('locationID', models.BigIntegerField(null=True, blank=True)),
                ('level', models.SmallIntegerField(null=True, blank=True)),
                ('quality', models.SmallIntegerField(null=True, blank=True)),
                ('agentTypeID', models.BigIntegerField(null=True, blank=True)),
                ('isLocator', models.NullBooleanField()),
            ],
            options={
                'db_table': 'agtAgents',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AgtAgentType',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='agentTypeID')),
                ('agentType', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'agtAgentTypes',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AgtResearchAgent',
            fields=[
                ('agentID', models.BigIntegerField()),
                ('typeID', models.BigIntegerField()),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'agtResearchAgents',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CertCert',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='certID')),
                ('description', models.TextField(blank=True)),
                ('groupid', models.BigIntegerField(null=True, blank=True)),
                ('name', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'certCerts',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CertMastery',
            fields=[
                ('typeID', models.BigIntegerField(null=True, blank=True)),
                ('masteryLevel', models.BigIntegerField(null=True, blank=True)),
                ('certID', models.BigIntegerField(null=True, blank=True)),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'certMasteries',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CertSkill',
            fields=[
                ('certID', models.BigIntegerField(null=True, blank=True)),
                ('skillID', models.BigIntegerField(null=True, blank=True)),
                ('certLevelInt', models.BigIntegerField(null=True, blank=True)),
                ('skillLevel', models.BigIntegerField(null=True, blank=True)),
                ('certLevelText', models.TextField(blank=True)),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'certSkills',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ChrAncestry',
            fields=[
                ('id', models.SmallIntegerField(serialize=False, primary_key=True, db_column='ancestryID')),
                ('ancestryName', models.TextField(blank=True)),
                ('bloodlineID', models.SmallIntegerField(null=True, blank=True)),
                ('description', models.TextField(blank=True)),
                ('perception', models.SmallIntegerField(null=True, blank=True)),
                ('willpower', models.SmallIntegerField(null=True, blank=True)),
                ('charisma', models.SmallIntegerField(null=True, blank=True)),
                ('memory', models.SmallIntegerField(null=True, blank=True)),
                ('intelligence', models.SmallIntegerField(null=True, blank=True)),
                ('iconID', models.BigIntegerField(null=True, blank=True)),
                ('shortDescription', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'chrAncestries',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ChrAttribute',
            fields=[
                ('id', models.SmallIntegerField(serialize=False, primary_key=True, db_column='attributeID')),
                ('attributeName', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('iconID', models.BigIntegerField(null=True, blank=True)),
                ('shortDescription', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'chrAttributes',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ChrBloodline',
            fields=[
                ('id', models.SmallIntegerField(serialize=False, primary_key=True, db_column='bloodlineID')),
                ('bloodlineName', models.TextField(blank=True)),
                ('raceID', models.SmallIntegerField(null=True, blank=True)),
                ('description', models.TextField(blank=True)),
                ('maleDescription', models.TextField(blank=True)),
                ('femaleDescription', models.TextField(blank=True)),
                ('shipTypeID', models.BigIntegerField(null=True, blank=True)),
                ('corporationID', models.BigIntegerField(null=True, blank=True)),
                ('perception', models.SmallIntegerField(null=True, blank=True)),
                ('willpower', models.SmallIntegerField(null=True, blank=True)),
                ('charisma', models.SmallIntegerField(null=True, blank=True)),
                ('memory', models.SmallIntegerField(null=True, blank=True)),
                ('intelligence', models.SmallIntegerField(null=True, blank=True)),
                ('iconID', models.BigIntegerField(null=True, blank=True)),
                ('shortDescription', models.TextField(blank=True)),
                ('shortMaleDescription', models.TextField(blank=True)),
                ('shortFemaleDescription', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'chrBloodlines',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ChrFaction',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='factionID')),
                ('factionName', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('raceIDs', models.BigIntegerField(null=True, blank=True)),
                ('solarSystemID', models.BigIntegerField(null=True, blank=True)),
                ('corporationID', models.BigIntegerField(null=True, blank=True)),
                ('sizeFactor', models.FloatField(null=True, blank=True)),
                ('stationCount', models.SmallIntegerField(null=True, blank=True)),
                ('stationSystemCount', models.SmallIntegerField(null=True, blank=True)),
                ('militiaCorporationID', models.BigIntegerField(null=True, blank=True)),
                ('iconID', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'chrFactions',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ChrRace',
            fields=[
                ('id', models.SmallIntegerField(serialize=False, primary_key=True, db_column='raceID')),
                ('raceName', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('iconID', models.BigIntegerField(null=True, blank=True)),
                ('shortDescription', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'chrRaces',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CrpActivity',
            fields=[
                ('id', models.SmallIntegerField(serialize=False, primary_key=True, db_column='activityID')),
                ('activityName', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'crpActivities',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CrpNPCCorporation',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='corporationID')),
                ('size', models.CharField(max_length=1, blank=True)),
                ('extent', models.CharField(max_length=1, blank=True)),
                ('solarSystemID', models.BigIntegerField(null=True, blank=True)),
                ('investorID1', models.BigIntegerField(null=True, blank=True)),
                ('investorShares1', models.SmallIntegerField(null=True, blank=True)),
                ('investorID2', models.BigIntegerField(null=True, blank=True)),
                ('investorShares2', models.SmallIntegerField(null=True, blank=True)),
                ('investorID3', models.BigIntegerField(null=True, blank=True)),
                ('investorShares3', models.SmallIntegerField(null=True, blank=True)),
                ('investorID4', models.BigIntegerField(null=True, blank=True)),
                ('investorShares4', models.SmallIntegerField(null=True, blank=True)),
                ('friendID', models.BigIntegerField(null=True, blank=True)),
                ('enemyID', models.BigIntegerField(null=True, blank=True)),
                ('publicShares', models.BigIntegerField(null=True, blank=True)),
                ('initialPrice', models.BigIntegerField(null=True, blank=True)),
                ('minSecurity', models.FloatField(null=True, blank=True)),
                ('scattered', models.NullBooleanField()),
                ('fringe', models.SmallIntegerField(null=True, blank=True)),
                ('corridor', models.SmallIntegerField(null=True, blank=True)),
                ('hub', models.SmallIntegerField(null=True, blank=True)),
                ('border', models.SmallIntegerField(null=True, blank=True)),
                ('factionID', models.BigIntegerField(null=True, blank=True)),
                ('sizeFactor', models.FloatField(null=True, blank=True)),
                ('stationCount', models.SmallIntegerField(null=True, blank=True)),
                ('stationSystemCount', models.SmallIntegerField(null=True, blank=True)),
                ('description', models.TextField(blank=True)),
                ('iconID', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'crpNPCCorporations',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CrpNPCCorporationDivision',
            fields=[
                ('corporationID', models.BigIntegerField()),
                ('divisionID', models.SmallIntegerField()),
                ('size', models.SmallIntegerField(null=True, blank=True)),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'crpNPCCorporationDivisions',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CrpNPCCorporationResearchField',
            fields=[
                ('skillID', models.BigIntegerField()),
                ('corporationID', models.BigIntegerField()),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'crpNPCCorporationResearchFields',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CrpNPCCorporationTrade',
            fields=[
                ('corporationID', models.BigIntegerField()),
                ('typeID', models.BigIntegerField()),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'crpNPCCorporationTrades',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CrpNPCDivision',
            fields=[
                ('id', models.SmallIntegerField(serialize=False, primary_key=True, db_column='divisionID')),
                ('divisionName', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('leaderType', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'crpNPCDivisions',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='DgmAttributeCategory',
            fields=[
                ('id', models.SmallIntegerField(serialize=False, primary_key=True, db_column='categoryID')),
                ('categoryName', models.TextField(blank=True)),
                ('categoryDescription', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'dgmAttributeCategories',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='DgmAttributeType',
            fields=[
                ('id', models.SmallIntegerField(serialize=False, primary_key=True, db_column='attributeID')),
                ('attributeName', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('iconID', models.BigIntegerField(null=True, blank=True)),
                ('defaultValue', models.FloatField(null=True, blank=True)),
                ('published', models.NullBooleanField()),
                ('displayName', models.TextField(blank=True)),
                ('unitID', models.SmallIntegerField(null=True, blank=True)),
                ('stackable', models.NullBooleanField()),
                ('highIsGood', models.NullBooleanField()),
                ('categoryID', models.SmallIntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'dgmAttributeTypes',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='DgmEffect',
            fields=[
                ('id', models.SmallIntegerField(serialize=False, primary_key=True, db_column='effectID')),
                ('effectName', models.TextField(blank=True)),
                ('effectCategory', models.SmallIntegerField(null=True, blank=True)),
                ('preExpression', models.BigIntegerField(null=True, blank=True)),
                ('postExpression', models.BigIntegerField(null=True, blank=True)),
                ('description', models.TextField(blank=True)),
                ('guid', models.TextField(blank=True)),
                ('iconID', models.BigIntegerField(null=True, blank=True)),
                ('isOffensive', models.NullBooleanField()),
                ('isAssistance', models.NullBooleanField()),
                ('durationAttributeID', models.SmallIntegerField(null=True, blank=True)),
                ('trackingSpeedAttributeID', models.SmallIntegerField(null=True, blank=True)),
                ('dischargeAttributeID', models.SmallIntegerField(null=True, blank=True)),
                ('rangeAttributeID', models.SmallIntegerField(null=True, blank=True)),
                ('falloffAttributeID', models.SmallIntegerField(null=True, blank=True)),
                ('disallowAutoRepeat', models.NullBooleanField()),
                ('published', models.NullBooleanField()),
                ('displayName', models.TextField(blank=True)),
                ('isWarpSafe', models.NullBooleanField()),
                ('rangeChance', models.NullBooleanField()),
                ('electronicChance', models.NullBooleanField()),
                ('propulsionChance', models.NullBooleanField()),
                ('distribution', models.SmallIntegerField(null=True, blank=True)),
                ('sfxName', models.TextField(blank=True)),
                ('npcUsageChanceAttributeID', models.SmallIntegerField(null=True, blank=True)),
                ('npcActivationChanceAttributeID', models.SmallIntegerField(null=True, blank=True)),
                ('fittingUsageChanceAttributeID', models.SmallIntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'dgmEffects',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='DgmTypeAttribute',
            fields=[
                ('typeID', models.BigIntegerField()),
                ('attributeID', models.SmallIntegerField()),
                ('valueInt', models.BigIntegerField(null=True, blank=True)),
                ('valueFloat', models.FloatField(null=True, blank=True)),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'dgmTypeAttributes',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='DgmTypeEffect',
            fields=[
                ('typeID', models.BigIntegerField()),
                ('effectID', models.SmallIntegerField()),
                ('isDefault', models.NullBooleanField()),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'dgmTypeEffects',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EveIcon',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='iconID')),
                ('iconFile', models.TextField()),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'eveIcons',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EveUnit',
            fields=[
                ('id', models.SmallIntegerField(serialize=False, primary_key=True, db_column='unitID')),
                ('unitName', models.TextField(blank=True)),
                ('displayName', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'eveUnits',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='IndustryActivity',
            fields=[
                ('typeID', models.BigIntegerField()),
                ('time', models.BigIntegerField(null=True, blank=True)),
                ('activityID', models.BigIntegerField()),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'industryActivity',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='IndustryActivityMaterial',
            fields=[
                ('typeID', models.BigIntegerField(null=True, blank=True)),
                ('activityID', models.BigIntegerField(null=True, blank=True)),
                ('materialTypeID', models.BigIntegerField(null=True, blank=True)),
                ('quantity', models.BigIntegerField(null=True, blank=True)),
                ('consume', models.SmallIntegerField(null=True, blank=True)),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'industryActivityMaterials',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='IndustryActivityProbability',
            fields=[
                ('typeID', models.BigIntegerField(null=True, blank=True)),
                ('activityID', models.BigIntegerField(null=True, blank=True)),
                ('productTypeID', models.BigIntegerField(null=True, blank=True)),
                ('probability', models.DecimalField(null=True, max_digits=3, decimal_places=2, blank=True)),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'industryActivityProbabilities',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='IndustryActivityProduct',
            fields=[
                ('typeID', models.BigIntegerField(null=True, blank=True)),
                ('activityID', models.BigIntegerField(null=True, blank=True)),
                ('productTypeID', models.BigIntegerField(null=True, blank=True)),
                ('quantity', models.BigIntegerField(null=True, blank=True)),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'industryActivityProducts',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='IndustryActivityRace',
            fields=[
                ('typeID', models.BigIntegerField(null=True, blank=True)),
                ('activityID', models.SmallIntegerField(null=True, blank=True)),
                ('productTypeID', models.BigIntegerField(null=True, blank=True)),
                ('raceID', models.SmallIntegerField(null=True, blank=True)),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'industryActivityRaces',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='IndustryActivitySkill',
            fields=[
                ('typeID', models.BigIntegerField(null=True, blank=True)),
                ('activityID', models.BigIntegerField(null=True, blank=True)),
                ('skillID', models.BigIntegerField(null=True, blank=True)),
                ('level', models.BigIntegerField(null=True, blank=True)),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'industryActivitySkills',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='IndustryBlueprint',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='typeID')),
                ('maxProductionLimit', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'industryBlueprints',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='InvCategory',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='categoryID')),
                ('categoryName', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('iconID', models.BigIntegerField(null=True, blank=True)),
                ('published', models.NullBooleanField()),
            ],
            options={
                'db_table': 'invCategories',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='InvContrabandType',
            fields=[
                ('factionID', models.BigIntegerField()),
                ('typeID', models.BigIntegerField()),
                ('standingLoss', models.FloatField(null=True, blank=True)),
                ('confiscateMinSec', models.FloatField(null=True, blank=True)),
                ('fineByValue', models.FloatField(null=True, blank=True)),
                ('attackMinSec', models.FloatField(null=True, blank=True)),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'invContrabandTypes',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='InvControlTowerResource',
            fields=[
                ('controlTowerTypeID', models.BigIntegerField()),
                ('resourceTypeID', models.BigIntegerField()),
                ('purpose', models.SmallIntegerField(null=True, blank=True)),
                ('quantity', models.BigIntegerField(null=True, blank=True)),
                ('minSecurityLevel', models.FloatField(null=True, blank=True)),
                ('factionID', models.BigIntegerField(null=True, blank=True)),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'invControlTowerResources',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='InvControlTowerResourcePurpose',
            fields=[
                ('id', models.SmallIntegerField(serialize=False, primary_key=True, db_column='purpose')),
                ('purposeText', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'invControlTowerResourcePurposes',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='InvFlag',
            fields=[
                ('id', models.SmallIntegerField(serialize=False, primary_key=True, db_column='flagID')),
                ('flagName', models.TextField(blank=True)),
                ('flagText', models.TextField(blank=True)),
                ('orderID', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'invFlags',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='InvGroup',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='groupID')),
                ('categoryID', models.BigIntegerField(null=True, blank=True)),
                ('groupName', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('iconID', models.BigIntegerField(null=True, blank=True)),
                ('useBasePrice', models.NullBooleanField()),
                ('allowManufacture', models.NullBooleanField()),
                ('allowRecycler', models.NullBooleanField()),
                ('anchored', models.NullBooleanField()),
                ('anchorable', models.NullBooleanField()),
                ('fittableNonSingleton', models.NullBooleanField()),
                ('published', models.NullBooleanField()),
            ],
            options={
                'db_table': 'invGroups',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='InvItem',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='itemID')),
                ('typeID', models.BigIntegerField()),
                ('ownerID', models.BigIntegerField()),
                ('locationID', models.BigIntegerField()),
                ('flagID', models.SmallIntegerField()),
                ('quantity', models.BigIntegerField()),
            ],
            options={
                'db_table': 'invItems',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='InvMarketGroup',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='marketGroupID')),
                ('parentGroupID', models.BigIntegerField(null=True, blank=True)),
                ('marketGroupName', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('iconID', models.BigIntegerField(null=True, blank=True)),
                ('hasTypes', models.NullBooleanField()),
            ],
            options={
                'db_table': 'invMarketGroups',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='InvMetaGroup',
            fields=[
                ('id', models.SmallIntegerField(serialize=False, primary_key=True, db_column='metaGroupID')),
                ('metaGroupName', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('iconID', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'invMetaGroups',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='InvMetaType',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='typeID')),
                ('parentTypeID', models.BigIntegerField(null=True, blank=True)),
                ('metaGroupID', models.SmallIntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'invMetaTypes',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='InvName',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='itemID')),
                ('itemName', models.TextField()),
            ],
            options={
                'db_table': 'invNames',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='InvPosition',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='itemID')),
                ('x', models.FloatField()),
                ('y', models.FloatField()),
                ('z', models.FloatField()),
                ('yaw', models.FloatField(null=True, blank=True)),
                ('pitch', models.FloatField(null=True, blank=True)),
                ('roll', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'invPositions',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='InvTrait',
            fields=[
                ('typeID', models.BigIntegerField(null=True, blank=True)),
                ('skillID', models.BigIntegerField(null=True, blank=True)),
                ('bonus', models.FloatField(null=True, blank=True)),
                ('bonusText', models.TextField(blank=True)),
                ('unitID', models.BigIntegerField(null=True, blank=True)),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'invTraits',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='InvType',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='typeID')),
                ('groupID', models.BigIntegerField(null=True, blank=True)),
                ('typeName', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('mass', models.FloatField(null=True, blank=True)),
                ('volume', models.FloatField(null=True, blank=True)),
                ('capacity', models.FloatField(null=True, blank=True)),
                ('portionSize', models.BigIntegerField(null=True, blank=True)),
                ('raceID', models.SmallIntegerField(null=True, blank=True)),
                ('basePrice', models.DecimalField(null=True, max_digits=19, decimal_places=4, blank=True)),
                ('published', models.NullBooleanField()),
                ('marketGroupID', models.BigIntegerField(null=True, blank=True)),
                ('chanceOfDuplicating', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'invTypes',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='InvTypeMaterial',
            fields=[
                ('typeID', models.BigIntegerField()),
                ('materialTypeID', models.BigIntegerField()),
                ('quantity', models.BigIntegerField()),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'invTypeMaterials',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='InvTypeReaction',
            fields=[
                ('reactionTypeID', models.BigIntegerField()),
                ('input', models.NullBooleanField()),
                ('typeID', models.BigIntegerField()),
                ('quantity', models.SmallIntegerField(null=True, blank=True)),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'invTypeReactions',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='InvUniqueName',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='itemID')),
                ('itemName', models.TextField(unique=True)),
                ('groupID', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'invUniqueNames',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MapCelestialStatistic',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='celestialID')),
                ('temperature', models.FloatField(null=True, blank=True)),
                ('spectralClass', models.TextField(blank=True)),
                ('luminosity', models.FloatField(null=True, blank=True)),
                ('age', models.FloatField(null=True, blank=True)),
                ('life', models.FloatField(null=True, blank=True)),
                ('orbitRadius', models.FloatField(null=True, blank=True)),
                ('eccentricity', models.FloatField(null=True, blank=True)),
                ('massDust', models.FloatField(null=True, blank=True)),
                ('massGas', models.FloatField(null=True, blank=True)),
                ('fragmented', models.BigIntegerField(null=True, blank=True)),
                ('density', models.FloatField(null=True, blank=True)),
                ('surfaceGravity', models.FloatField(null=True, blank=True)),
                ('escapeVelocity', models.FloatField(null=True, blank=True)),
                ('orbitPeriod', models.FloatField(null=True, blank=True)),
                ('rotationRate', models.FloatField(null=True, blank=True)),
                ('locked', models.BigIntegerField(null=True, blank=True)),
                ('pressure', models.BigIntegerField(null=True, blank=True)),
                ('radius', models.BigIntegerField(null=True, blank=True)),
                ('mass', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'mapCelestialStatistics',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MapConstellation',
            fields=[
                ('regionID', models.BigIntegerField(null=True, blank=True)),
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='constellationID')),
                ('constellationName', models.TextField(blank=True)),
                ('x', models.FloatField(null=True, blank=True)),
                ('y', models.FloatField(null=True, blank=True)),
                ('z', models.FloatField(null=True, blank=True)),
                ('xMin', models.FloatField(null=True, blank=True)),
                ('xMax', models.FloatField(null=True, blank=True)),
                ('yMin', models.FloatField(null=True, blank=True)),
                ('yMax', models.FloatField(null=True, blank=True)),
                ('zMin', models.FloatField(null=True, blank=True)),
                ('zMax', models.FloatField(null=True, blank=True)),
                ('factionID', models.BigIntegerField(null=True, blank=True)),
                ('radius', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'mapConstellations',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MapConstellationJump',
            fields=[
                ('fromRegionID', models.BigIntegerField(null=True, blank=True)),
                ('fromConstellationID', models.BigIntegerField()),
                ('toConstellationID', models.BigIntegerField()),
                ('toRegionID', models.BigIntegerField(null=True, blank=True)),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'mapConstellationJumps',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MapDenormalize',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='itemID')),
                ('typeID', models.BigIntegerField(null=True, blank=True)),
                ('groupID', models.BigIntegerField(null=True, blank=True)),
                ('solarSystemID', models.BigIntegerField(null=True, blank=True)),
                ('constellationID', models.BigIntegerField(null=True, blank=True)),
                ('regionID', models.BigIntegerField(null=True, blank=True)),
                ('orbitID', models.BigIntegerField(null=True, blank=True)),
                ('x', models.FloatField(null=True, blank=True)),
                ('y', models.FloatField(null=True, blank=True)),
                ('z', models.FloatField(null=True, blank=True)),
                ('radius', models.FloatField(null=True, blank=True)),
                ('itemName', models.TextField(blank=True)),
                ('security', models.FloatField(null=True, blank=True)),
                ('celestialIndex', models.BigIntegerField(null=True, blank=True)),
                ('orbitIndex', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'mapDenormalize',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MapJump',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='stargateID')),
                ('destinationID', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'mapJumps',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MapLandmark',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='landmarkID')),
                ('landmarkName', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('locationID', models.BigIntegerField(null=True, blank=True)),
                ('x', models.FloatField(null=True, blank=True)),
                ('y', models.FloatField(null=True, blank=True)),
                ('z', models.FloatField(null=True, blank=True)),
                ('iconID', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'mapLandmarks',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MapLocationScene',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='locationID')),
                ('graphicID', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'mapLocationScenes',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MapLocationWormholeClass',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='locationID')),
                ('wormholeClassID', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'mapLocationWormholeClasses',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MapRegion',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='regionID')),
                ('regionName', models.TextField(blank=True)),
                ('x', models.FloatField(null=True, blank=True)),
                ('y', models.FloatField(null=True, blank=True)),
                ('z', models.FloatField(null=True, blank=True)),
                ('xMin', models.FloatField(null=True, blank=True)),
                ('xMax', models.FloatField(null=True, blank=True)),
                ('yMin', models.FloatField(null=True, blank=True)),
                ('yMax', models.FloatField(null=True, blank=True)),
                ('zMin', models.FloatField(null=True, blank=True)),
                ('zMax', models.FloatField(null=True, blank=True)),
                ('factionID', models.BigIntegerField(null=True, blank=True)),
                ('radius', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'mapRegions',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MapRegionJump',
            fields=[
                ('fromRegionID', models.BigIntegerField()),
                ('toRegionID', models.BigIntegerField()),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'mapRegionJumps',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MapSolarSystem',
            fields=[
                ('regionID', models.BigIntegerField(null=True, blank=True)),
                ('constellationID', models.BigIntegerField(null=True, blank=True)),
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='solarSystemID')),
                ('solarSystemName', models.TextField(blank=True)),
                ('x', models.FloatField(null=True, blank=True)),
                ('y', models.FloatField(null=True, blank=True)),
                ('z', models.FloatField(null=True, blank=True)),
                ('xMin', models.FloatField(null=True, blank=True)),
                ('xMax', models.FloatField(null=True, blank=True)),
                ('yMin', models.FloatField(null=True, blank=True)),
                ('yMax', models.FloatField(null=True, blank=True)),
                ('zMin', models.FloatField(null=True, blank=True)),
                ('zMax', models.FloatField(null=True, blank=True)),
                ('luminosity', models.FloatField(null=True, blank=True)),
                ('border', models.BigIntegerField(null=True, blank=True)),
                ('fringe', models.BigIntegerField(null=True, blank=True)),
                ('corridor', models.BigIntegerField(null=True, blank=True)),
                ('hub', models.BigIntegerField(null=True, blank=True)),
                ('international', models.BigIntegerField(null=True, blank=True)),
                ('regional', models.BigIntegerField(null=True, blank=True)),
                ('constellation', models.BigIntegerField(null=True, blank=True)),
                ('security', models.FloatField(null=True, blank=True)),
                ('factionID', models.BigIntegerField(null=True, blank=True)),
                ('radius', models.FloatField(null=True, blank=True)),
                ('sunTypeID', models.BigIntegerField(null=True, blank=True)),
                ('securityClass', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'mapSolarSystems',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MapSolarSystemJump',
            fields=[
                ('fromRegionID', models.BigIntegerField(null=True, blank=True)),
                ('fromConstellationID', models.BigIntegerField(null=True, blank=True)),
                ('fromSolarSystemID', models.BigIntegerField()),
                ('toSolarSystemID', models.BigIntegerField()),
                ('toConstellationID', models.BigIntegerField(null=True, blank=True)),
                ('toRegionID', models.BigIntegerField(null=True, blank=True)),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'mapSolarSystemJumps',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MapUniverse',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='universeID')),
                ('universeName', models.TextField(blank=True)),
                ('x', models.FloatField(null=True, blank=True)),
                ('y', models.FloatField(null=True, blank=True)),
                ('z', models.FloatField(null=True, blank=True)),
                ('xMin', models.FloatField(null=True, blank=True)),
                ('xMax', models.FloatField(null=True, blank=True)),
                ('yMin', models.FloatField(null=True, blank=True)),
                ('yMax', models.FloatField(null=True, blank=True)),
                ('zMin', models.FloatField(null=True, blank=True)),
                ('zMax', models.FloatField(null=True, blank=True)),
                ('radius', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'mapUniverse',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PlanetSchematic',
            fields=[
                ('id', models.SmallIntegerField(serialize=False, primary_key=True, db_column='schematicID')),
                ('schematicName', models.TextField(blank=True)),
                ('cycleTime', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'planetSchematics',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PlanetSchematicsPinMap',
            fields=[
                ('schematicID', models.SmallIntegerField()),
                ('pinTypeID', models.BigIntegerField()),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'planetSchematicsPinMap',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PlanetSchematicsTypeMap',
            fields=[
                ('schematicID', models.SmallIntegerField()),
                ('typeID', models.BigIntegerField()),
                ('quantity', models.SmallIntegerField(null=True, blank=True)),
                ('isInput', models.NullBooleanField()),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'planetSchematicsTypeMap',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='RamActivity',
            fields=[
                ('id', models.SmallIntegerField(serialize=False, primary_key=True, db_column='activityID')),
                ('activityName', models.TextField(blank=True)),
                ('iconNo', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('published', models.NullBooleanField()),
            ],
            options={
                'db_table': 'ramActivities',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='RamAssemblyLineStation',
            fields=[
                ('stationID', models.BigIntegerField()),
                ('assemblyLineTypeID', models.SmallIntegerField()),
                ('quantity', models.SmallIntegerField(null=True, blank=True)),
                ('stationTypeID', models.BigIntegerField(null=True, blank=True)),
                ('ownerID', models.BigIntegerField(null=True, blank=True)),
                ('solarSystemID', models.BigIntegerField(null=True, blank=True)),
                ('regionID', models.BigIntegerField(null=True, blank=True)),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'ramAssemblyLineStations',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='RamAssemblyLineType',
            fields=[
                ('id', models.SmallIntegerField(serialize=False, primary_key=True, db_column='assemblyLineTypeID')),
                ('assemblyLineTypeName', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('baseTimeMultiplier', models.FloatField(null=True, blank=True)),
                ('baseMaterialMultiplier', models.FloatField(null=True, blank=True)),
                ('baseCostMultiplier', models.FloatField(null=True, blank=True)),
                ('volume', models.FloatField(null=True, blank=True)),
                ('activityID', models.SmallIntegerField(null=True, blank=True)),
                ('minCostPerHour', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'ramAssemblyLineTypes',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='RamAssemblyLineTypeDetailPerCategory',
            fields=[
                ('assemblyLineTypeID', models.SmallIntegerField()),
                ('categoryID', models.BigIntegerField()),
                ('timeMultiplier', models.FloatField(null=True, blank=True)),
                ('materialMultiplier', models.FloatField(null=True, blank=True)),
                ('costMultiplier', models.FloatField(null=True, blank=True)),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'ramAssemblyLineTypeDetailPerCategory',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='RamAssemblyLineTypeDetailPerGroup',
            fields=[
                ('assemblyLineTypeID', models.SmallIntegerField()),
                ('groupID', models.BigIntegerField()),
                ('timeMultiplier', models.FloatField(null=True, blank=True)),
                ('materialMultiplier', models.FloatField(null=True, blank=True)),
                ('costMultiplier', models.FloatField(null=True, blank=True)),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'ramAssemblyLineTypeDetailPerGroup',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='RamInstallationTypeContent',
            fields=[
                ('installationTypeID', models.BigIntegerField()),
                ('assemblyLineTypeID', models.SmallIntegerField()),
                ('quantity', models.SmallIntegerField(null=True, blank=True)),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'ramInstallationTypeContents',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='StaOperation',
            fields=[
                ('activityID', models.SmallIntegerField(null=True, blank=True)),
                ('id', models.SmallIntegerField(serialize=False, primary_key=True, db_column='operationID')),
                ('operationName', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('fringe', models.SmallIntegerField(null=True, blank=True)),
                ('corridor', models.SmallIntegerField(null=True, blank=True)),
                ('hub', models.SmallIntegerField(null=True, blank=True)),
                ('border', models.SmallIntegerField(null=True, blank=True)),
                ('ratio', models.SmallIntegerField(null=True, blank=True)),
                ('caldariStationTypeID', models.BigIntegerField(null=True, blank=True)),
                ('minmatarStationTypeID', models.BigIntegerField(null=True, blank=True)),
                ('amarrStationTypeID', models.BigIntegerField(null=True, blank=True)),
                ('gallenteStationTypeID', models.BigIntegerField(null=True, blank=True)),
                ('joveStationTypeID', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'staOperations',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='StaOperationService',
            fields=[
                ('operationID', models.SmallIntegerField()),
                ('serviceID', models.BigIntegerField()),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'staOperationServices',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='StaService',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='serviceID')),
                ('serviceName', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'staServices',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='StaStation',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='stationID')),
                ('security', models.SmallIntegerField(null=True, blank=True)),
                ('dockingCostPerVolume', models.FloatField(null=True, blank=True)),
                ('maxShipVolumeDockable', models.FloatField(null=True, blank=True)),
                ('officeRentalCost', models.BigIntegerField(null=True, blank=True)),
                ('operationID', models.SmallIntegerField(null=True, blank=True)),
                ('stationTypeID', models.BigIntegerField(null=True, blank=True)),
                ('corporationID', models.BigIntegerField(null=True, blank=True)),
                ('solarSystemID', models.BigIntegerField(null=True, blank=True)),
                ('constellationID', models.BigIntegerField(null=True, blank=True)),
                ('regionID', models.BigIntegerField(null=True, blank=True)),
                ('stationName', models.TextField(blank=True)),
                ('x', models.FloatField(null=True, blank=True)),
                ('y', models.FloatField(null=True, blank=True)),
                ('z', models.FloatField(null=True, blank=True)),
                ('reprocessingEfficiency', models.FloatField(null=True, blank=True)),
                ('reprocessingStationsTake', models.FloatField(null=True, blank=True)),
                ('reprocessingHangarFlag', models.SmallIntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'staStations',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='StaStationType',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='stationTypeID')),
                ('dockEntryX', models.FloatField(null=True, blank=True)),
                ('dockEntryY', models.FloatField(null=True, blank=True)),
                ('dockEntryZ', models.FloatField(null=True, blank=True)),
                ('dockOrientationX', models.FloatField(null=True, blank=True)),
                ('dockOrientationY', models.FloatField(null=True, blank=True)),
                ('dockOrientationZ', models.FloatField(null=True, blank=True)),
                ('operationID', models.SmallIntegerField(null=True, blank=True)),
                ('officeSlots', models.SmallIntegerField(null=True, blank=True)),
                ('reprocessingEfficiency', models.FloatField(null=True, blank=True)),
                ('conquerable', models.NullBooleanField()),
            ],
            options={
                'db_table': 'staStationTypes',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TranslationTable',
            fields=[
                ('sourceTable', models.TextField()),
                ('destinationTable', models.TextField(blank=True)),
                ('translatedKey', models.TextField()),
                ('tcGroupID', models.BigIntegerField(null=True, blank=True)),
                ('tcID', models.BigIntegerField(null=True, blank=True)),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'translationTables',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TrnTranslation',
            fields=[
                ('tcID', models.SmallIntegerField()),
                ('keyID', models.BigIntegerField()),
                ('languageID', models.TextField()),
                ('text', models.TextField()),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'trnTranslations',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TrnTranslationColumn',
            fields=[
                ('tcGroupID', models.SmallIntegerField(null=True, blank=True)),
                ('id', models.SmallIntegerField(serialize=False, primary_key=True, db_column='tcID')),
                ('tableName', models.TextField()),
                ('columnName', models.TextField()),
                ('masterID', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'trnTranslationColumns',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TrnTranslationLanguage',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='numericLanguageID')),
                ('languageID', models.TextField(blank=True)),
                ('languageName', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'trnTranslationLanguages',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='WarCombatZone',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='combatZoneID')),
                ('combatZoneName', models.TextField(blank=True)),
                ('factionID', models.BigIntegerField(null=True, blank=True)),
                ('centerSystemID', models.BigIntegerField(null=True, blank=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'warCombatZones',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='WarCombatZoneSystem',
            fields=[
                ('id', models.BigIntegerField(serialize=False, primary_key=True, db_column='solarSystemID')),
                ('combatZoneID', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'warCombatZoneSystems',
            },
            bases=(models.Model,),
        ),
    ]
