# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import django_pgjson.fields
import stationspinner.libs.fields
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('accounting', '0002_apiupdate_cached_until'),
    ]

    operations = [
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('itemID', models.BigIntegerField()),
                ('quantity', models.BigIntegerField()),
                ('locationID', models.BigIntegerField()),
                ('locationName', models.CharField(default=b'', max_length=255, blank=True)),
                ('typeID', models.IntegerField()),
                ('typeName', models.CharField(max_length=255)),
                ('flag', models.IntegerField()),
                ('singleton', models.BooleanField(default=False)),
                ('rawQuantity', models.IntegerField(default=0)),
                ('path', models.CharField(default=b'', max_length=255)),
                ('parent_id', models.BigIntegerField(null=True)),
            ],
            options={
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AccountBalance',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('accountKey', models.IntegerField()),
                ('balance', models.DecimalField(null=True, max_digits=30, decimal_places=2)),
                ('accountID', models.IntegerField(null=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AssetList',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('items', django_pgjson.fields.JsonBField()),
                ('retrieved', stationspinner.libs.fields.DateTimeField()),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Blueprint',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('itemID', models.BigIntegerField()),
                ('typeID', models.IntegerField()),
                ('runs', models.IntegerField()),
                ('flagID', models.IntegerField()),
                ('timeEfficiency', models.IntegerField()),
                ('materialEfficiency', models.IntegerField()),
                ('typeName', models.CharField(max_length=255)),
                ('locationID', models.BigIntegerField()),
                ('quantity', models.IntegerField()),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('standing', models.IntegerField()),
                ('inWatchlist', models.BooleanField(default=False)),
                ('contactID', models.IntegerField()),
                ('contactName', models.CharField(max_length=255)),
                ('contactTypeID', models.IntegerField()),
                ('listType', models.CharField(max_length=20, choices=[(b'Private', b'Private'), (b'Corporate', b'Corporate'), (b'Alliance', b'Alliance')])),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ContainerLog',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('itemID', models.BigIntegerField()),
                ('typeID', models.IntegerField(null=True)),
                ('itemTypeID', models.IntegerField()),
                ('actorName', models.CharField(max_length=255)),
                ('flag', models.IntegerField()),
                ('locationID', models.IntegerField()),
                ('logTime', stationspinner.libs.fields.DateTimeField()),
                ('passwordType', models.CharField(default=b'', max_length=9, blank=True)),
                ('action', models.CharField(max_length=50)),
                ('actorID', models.IntegerField()),
                ('quantity', models.IntegerField(null=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('status', models.CharField(max_length=50)),
                ('startStationID', models.IntegerField(null=True)),
                ('dateCompleted', stationspinner.libs.fields.DateTimeField(null=True)),
                ('collateral', models.DecimalField(null=True, max_digits=30, decimal_places=2)),
                ('assigneeID', models.IntegerField(null=True)),
                ('issuerID', models.IntegerField()),
                ('price', models.DecimalField(null=True, max_digits=30, decimal_places=2)),
                ('endStationID', models.IntegerField(null=True)),
                ('buyout', models.DecimalField(null=True, max_digits=30, decimal_places=2)),
                ('dateExpired', stationspinner.libs.fields.DateTimeField()),
                ('availability', models.CharField(max_length=10)),
                ('numDays', models.IntegerField(null=True)),
                ('volume', models.DecimalField(null=True, max_digits=30, decimal_places=2)),
                ('title', models.CharField(max_length=255)),
                ('acceptorID', models.IntegerField(null=True)),
                ('forCorp', models.BooleanField(default=False)),
                ('dateAccepted', stationspinner.libs.fields.DateTimeField(null=True)),
                ('dateIssued', stationspinner.libs.fields.DateTimeField(null=True)),
                ('reward', models.DecimalField(null=True, max_digits=30, decimal_places=2)),
                ('type', models.CharField(max_length=15)),
                ('issuerCorpID', models.IntegerField()),
                ('contractID', models.BigIntegerField()),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ContractBid',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('bidID', models.BigIntegerField()),
                ('contractID', models.BigIntegerField()),
                ('bidderID', models.BigIntegerField()),
                ('dateBid', stationspinner.libs.fields.DateTimeField()),
                ('amount', models.DecimalField(null=True, max_digits=30, decimal_places=2)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ContractItem',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('rowID', models.BigIntegerField()),
                ('typeID', models.IntegerField()),
                ('quantity', models.BigIntegerField()),
                ('rawQuantity', models.IntegerField(null=True)),
                ('singleton', models.BooleanField(default=False)),
                ('included', models.BooleanField(default=True)),
                ('contract', models.ForeignKey(to='corporation.Contract')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CorporationSheet',
            fields=[
                ('enabled', models.BooleanField(default=False)),
                ('corporationID', models.IntegerField(serialize=False, primary_key=True)),
                ('corporationName', models.CharField(max_length=255)),
                ('allianceID', models.IntegerField(null=True)),
                ('allianceName', models.CharField(max_length=255, null=True)),
                ('description', models.TextField(default=b'', blank=True)),
                ('memberLimit', models.IntegerField(null=True)),
                ('taxRate', models.IntegerField()),
                ('factionID', models.IntegerField(default=0, null=True)),
                ('ceoName', models.CharField(max_length=255)),
                ('ceoID', models.IntegerField()),
                ('stationName', models.CharField(max_length=255)),
                ('stationID', models.IntegerField()),
                ('ticker', models.CharField(max_length=10)),
                ('memberCount', models.IntegerField(default=1)),
                ('shares', models.IntegerField(default=1)),
                ('url', models.CharField(default=b'', max_length=255, blank=True)),
                ('owner', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
                ('owner_key', models.ForeignKey(to='accounting.APIKey')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.RunSQL(
            sql='''
            CREATE TABLE "corporation_asset" (
                "id" serial NOT NULL PRIMARY KEY,
                "itemID" bigint NOT NULL,
                "quantity" bigint NOT NULL,
                "locationID" bigint NOT NULL,
                "locationName" character varying(255),
                "typeID" integer NOT NULL,
                "typeName" character varying(255),
                "flag" integer NOT NULL,
                "singleton" boolean NOT NULL,
                "rawQuantity" integer,
                "path" ltree,
                "parent_id" bigint,
                "owner_id" integer NOT NULL
            );
            CREATE INDEX corporation_asset_path_gist_idx ON corporation_asset USING GIST (path);
            CREATE INDEX corporation_asset_owner_id ON corporation_asset USING btree (owner_id);
            CREATE INDEX corporation_asset_compound_owner_id_item_id ON corporation_asset USING btree (owner_id, "itemID");
            CREATE INDEX corporation_asset_compound_owner_id_parent_id ON corporation_asset USING btree (owner_id, parent_id);
            ALTER TABLE ONLY corporation_asset
                ADD CONSTRAINT corporation_asset_owner_id_fkey FOREIGN KEY (owner_id)
                REFERENCES corporation_corporationsheet("corporationID") DEFERRABLE INITIALLY DEFERRED;
            '''
        ),
        migrations.CreateModel(
            name='Division',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('accountKey', models.IntegerField()),
                ('description', models.CharField(max_length=255)),
                ('owner', models.ForeignKey(to='corporation.CorporationSheet')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Facilities',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('facilityID', models.BigIntegerField()),
                ('typeID', models.IntegerField()),
                ('typeName', models.CharField(max_length=255)),
                ('solarSystemID', models.IntegerField()),
                ('solarSystemName', models.CharField(max_length=255)),
                ('regionID', models.IntegerField()),
                ('regionName', models.CharField(max_length=255)),
                ('tax', models.IntegerField(default=0)),
                ('starbaseModifier', models.IntegerField(default=0)),
                ('owner', models.ForeignKey(to='corporation.CorporationSheet')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='IndustryJob',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('status', models.IntegerField(null=True)),
                ('startDate', stationspinner.libs.fields.DateTimeField()),
                ('endDate', stationspinner.libs.fields.DateTimeField()),
                ('probability', models.DecimalField(null=True, max_digits=4, decimal_places=2)),
                ('blueprintTypeName', models.CharField(max_length=255, null=True, blank=True)),
                ('runs', models.IntegerField(null=True)),
                ('outputLocationID', models.BigIntegerField()),
                ('activityID', models.IntegerField()),
                ('cost', models.DecimalField(null=True, max_digits=30, decimal_places=2)),
                ('blueprintTypeID', models.IntegerField(null=True)),
                ('timeInSeconds', models.IntegerField()),
                ('productTypeID', models.IntegerField(null=True)),
                ('completedDate', stationspinner.libs.fields.DateTimeField(null=True)),
                ('completedCharacterID', models.IntegerField(null=True)),
                ('installerName', models.CharField(max_length=255)),
                ('installerID', models.IntegerField()),
                ('facilityID', models.IntegerField()),
                ('pauseDate', stationspinner.libs.fields.DateTimeField(null=True)),
                ('solarSystemName', models.CharField(max_length=255)),
                ('stationID', models.IntegerField(null=True)),
                ('jobID', models.BigIntegerField(null=True)),
                ('teamID', models.IntegerField(null=True)),
                ('productTypeName', models.CharField(max_length=255, null=True, blank=True)),
                ('blueprintLocationID', models.IntegerField(null=True)),
                ('blueprintID', models.BigIntegerField(null=True)),
                ('solarSystemID', models.IntegerField()),
                ('licensedRuns', models.IntegerField(null=True)),
                ('owner', models.ForeignKey(to='corporation.CorporationSheet')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='IndustryJobHistory',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('status', models.IntegerField(null=True)),
                ('startDate', stationspinner.libs.fields.DateTimeField()),
                ('endDate', stationspinner.libs.fields.DateTimeField()),
                ('probability', models.DecimalField(null=True, max_digits=4, decimal_places=2)),
                ('blueprintTypeName', models.CharField(max_length=255, null=True, blank=True)),
                ('runs', models.IntegerField(null=True)),
                ('outputLocationID', models.BigIntegerField()),
                ('activityID', models.IntegerField()),
                ('cost', models.DecimalField(null=True, max_digits=30, decimal_places=2)),
                ('blueprintTypeID', models.IntegerField(null=True)),
                ('timeInSeconds', models.IntegerField()),
                ('productTypeID', models.IntegerField(null=True)),
                ('completedDate', stationspinner.libs.fields.DateTimeField(null=True)),
                ('completedCharacterID', models.IntegerField(null=True)),
                ('installerName', models.CharField(max_length=255)),
                ('installerID', models.IntegerField()),
                ('facilityID', models.IntegerField()),
                ('pauseDate', stationspinner.libs.fields.DateTimeField(null=True)),
                ('solarSystemName', models.CharField(max_length=255)),
                ('stationID', models.IntegerField(null=True)),
                ('jobID', models.BigIntegerField(null=True)),
                ('teamID', models.IntegerField(null=True)),
                ('productTypeName', models.CharField(max_length=255, null=True, blank=True)),
                ('blueprintLocationID', models.IntegerField(null=True)),
                ('blueprintID', models.BigIntegerField(null=True)),
                ('solarSystemID', models.IntegerField()),
                ('licensedRuns', models.IntegerField(null=True)),
                ('owner', models.ForeignKey(to='corporation.CorporationSheet')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MarketOrder',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('orderID', models.BigIntegerField()),
                ('typeID', models.IntegerField()),
                ('volEntered', models.BigIntegerField()),
                ('minVolume', models.BigIntegerField()),
                ('charID', models.IntegerField()),
                ('accountKey', models.IntegerField(default=1000)),
                ('issued', stationspinner.libs.fields.DateTimeField()),
                ('bid', models.BooleanField(default=False)),
                ('range', models.IntegerField()),
                ('escrow', models.DecimalField(null=True, max_digits=30, decimal_places=2)),
                ('stationID', models.IntegerField()),
                ('orderState', models.IntegerField()),
                ('volRemaining', models.BigIntegerField()),
                ('duration', models.IntegerField()),
                ('price', models.DecimalField(max_digits=30, decimal_places=2)),
                ('owner', models.ForeignKey(to='corporation.CorporationSheet')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Medal',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('medalID', models.BigIntegerField()),
                ('title', models.CharField(max_length=255, null=True)),
                ('description', models.TextField(default=b'', blank=True)),
                ('created', stationspinner.libs.fields.DateTimeField()),
                ('creatorID', models.IntegerField()),
                ('owner', models.ForeignKey(to='corporation.CorporationSheet')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MemberMedal',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('medalID', models.BigIntegerField()),
                ('status', models.CharField(max_length=10)),
                ('issued', stationspinner.libs.fields.DateTimeField()),
                ('issuerID', models.IntegerField()),
                ('reason', models.TextField(default=b'', blank=True)),
                ('title', models.CharField(max_length=255, null=True)),
                ('description', models.TextField(default=b'', blank=True)),
                ('owner', models.ForeignKey(to='corporation.CorporationSheet')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MemberSecurity',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('roleID', models.BigIntegerField()),
                ('roleName', models.CharField(max_length=100)),
                ('location', models.CharField(max_length=10, choices=[(b'Global', b'Global'), (b'Base', b'Base'), (b'Other', b'Other'), (b'HQ', b'HQ')])),
                ('characterID', models.IntegerField()),
                ('characterName', models.CharField(max_length=255)),
                ('grantable', models.BooleanField(default=False)),
                ('owner', models.ForeignKey(to='corporation.CorporationSheet')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MemberSecurityLog',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('changeTime', stationspinner.libs.fields.DateTimeField()),
                ('issuerID', models.IntegerField()),
                ('issuerName', models.CharField(max_length=255)),
                ('characterID', models.IntegerField()),
                ('characterName', models.CharField(max_length=255)),
                ('roleLocationType', models.CharField(max_length=255)),
                ('change_type', models.CharField(max_length=3, choices=[(b'New', b'New'), (b'Old', b'Old')])),
                ('roleID', models.BigIntegerField()),
                ('roleName', models.CharField(max_length=255)),
                ('owner', models.ForeignKey(to='corporation.CorporationSheet')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MemberTitle',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('characterID', models.IntegerField()),
                ('characterName', models.CharField(max_length=255)),
                ('titleID', models.IntegerField()),
                ('titleName', models.CharField(max_length=255)),
                ('owner', models.ForeignKey(to='corporation.CorporationSheet')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MemberTracking',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('characterID', models.IntegerField()),
                ('name', models.CharField(max_length=255)),
                ('title', models.CharField(default=b'', max_length=255, blank=True)),
                ('startDateTime', stationspinner.libs.fields.DateTimeField()),
                ('logonDateTime', stationspinner.libs.fields.DateTimeField(null=True)),
                ('logoffDateTime', stationspinner.libs.fields.DateTimeField()),
                ('locationID', models.IntegerField()),
                ('location', models.CharField(max_length=255)),
                ('shipTypeID', models.IntegerField()),
                ('shipType', models.CharField(default=b'', max_length=255, blank=True)),
                ('roles', models.BigIntegerField(default=0)),
                ('grantableRoles', models.BigIntegerField(default=0)),
                ('owner', models.ForeignKey(to='corporation.CorporationSheet')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='NPCStanding',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('type', models.CharField(max_length=11, choices=[(b'Agent', b'Agent'), (b'Corporation', b'Corporation'), (b'Faction', b'Faction')])),
                ('fromID', models.IntegerField()),
                ('fromName', models.CharField(max_length=255)),
                ('standing', models.DecimalField(max_digits=5, decimal_places=2)),
                ('owner', models.ForeignKey(to='corporation.CorporationSheet')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Outpost',
            fields=[
                ('stationID', models.IntegerField(serialize=False, primary_key=True)),
                ('stationName', models.CharField(max_length=255)),
                ('reprocessingEfficiency', models.DecimalField(default=0.0, max_digits=30, decimal_places=10)),
                ('reprocessingStationTake', models.DecimalField(default=0.0, max_digits=30, decimal_places=10)),
                ('officeRentalCost', models.DecimalField(null=True, max_digits=30, decimal_places=2)),
                ('dockingCostPerShipColume', models.DecimalField(default=0.0, max_digits=30, decimal_places=2)),
                ('standingOwnerID', models.IntegerField()),
                ('ownerID', models.IntegerField()),
                ('solarSystemID', models.IntegerField()),
                ('stationTypeID', models.IntegerField()),
                ('owner', models.ForeignKey(to='corporation.CorporationSheet')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='OutpostService',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('serviceName', models.CharField(max_length=255)),
                ('minStanding', models.DecimalField(max_digits=5, decimal_places=2)),
                ('surchargePerBadStanding', models.IntegerField()),
                ('discountPerGoodStanding', models.IntegerField()),
                ('outpost', models.ForeignKey(to='corporation.Outpost')),
                ('owner', models.ForeignKey(to='corporation.CorporationSheet')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Shareholder',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('holder_type', models.CharField(max_length=11, choices=[(b'Corporation', b'Corporation'), (b'Character', b'Character')])),
                ('shareholderID', models.IntegerField()),
                ('shareholderName', models.CharField(max_length=255)),
                ('shareholderCorporationID', models.IntegerField(null=True)),
                ('shareholderCorporationName', models.CharField(max_length=255, null=True)),
                ('shares', models.IntegerField(default=1)),
                ('owner', models.ForeignKey(to='corporation.CorporationSheet')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Starbase',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('itemID', models.BigIntegerField()),
                ('typeID', models.IntegerField()),
                ('standingOwnerID', models.IntegerField()),
                ('stateTimestamp', stationspinner.libs.fields.DateTimeField()),
                ('state', models.IntegerField()),
                ('onlineTimestamp', stationspinner.libs.fields.DateTimeField()),
                ('locationID', models.IntegerField(null=True)),
                ('moonID', models.IntegerField(null=True)),
                ('general_settings', django_pgjson.fields.JsonField(default={}, blank=True)),
                ('combat_settings', django_pgjson.fields.JsonField(default={}, blank=True)),
                ('owner', models.ForeignKey(to='corporation.CorporationSheet')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='StarbaseFuel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('typeID', models.IntegerField()),
                ('quantity', models.IntegerField()),
                ('owner', models.ForeignKey(to='corporation.CorporationSheet')),
                ('starbase', models.ForeignKey(to='corporation.Starbase')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='WalletDivision',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('accountKey', models.IntegerField()),
                ('description', models.CharField(max_length=255)),
                ('owner', models.ForeignKey(to='corporation.CorporationSheet')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='WalletJournal',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('taxReceiverID', models.CharField(max_length=255, null=True, blank=True)),
                ('argName1', models.CharField(max_length=255, null=True, blank=True)),
                ('reason', models.CharField(max_length=255, null=True, blank=True)),
                ('date', stationspinner.libs.fields.DateTimeField()),
                ('refTypeID', models.IntegerField(null=True)),
                ('refID', models.BigIntegerField(null=True)),
                ('ownerID2', models.IntegerField(null=True)),
                ('taxAmount', models.CharField(max_length=255, null=True, blank=True)),
                ('ownerID1', models.IntegerField(null=True)),
                ('argID1', models.IntegerField(null=True)),
                ('owner1TypeID', models.IntegerField(null=True)),
                ('ownerName2', models.CharField(max_length=255, null=True, blank=True)),
                ('owner2TypeID', models.IntegerField(null=True)),
                ('ownerName1', models.CharField(max_length=255, null=True, blank=True)),
                ('amount', models.DecimalField(null=True, max_digits=30, decimal_places=2)),
                ('balance', models.DecimalField(null=True, max_digits=30, decimal_places=2)),
                ('owner', models.ForeignKey(to='corporation.CorporationSheet')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='WalletTransaction',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('typeID', models.IntegerField(null=True)),
                ('clientTypeID', models.IntegerField(null=True)),
                ('transactionFor', models.CharField(max_length=255, null=True, blank=True)),
                ('price', models.DecimalField(null=True, max_digits=30, decimal_places=2)),
                ('clientID', models.IntegerField(null=True)),
                ('journalTransactionID', models.IntegerField(null=True)),
                ('typeName', models.CharField(max_length=255, null=True, blank=True)),
                ('stationID', models.IntegerField(null=True)),
                ('stationName', models.CharField(max_length=255, null=True, blank=True)),
                ('transactionID', models.IntegerField(null=True)),
                ('quantity', models.IntegerField(null=True)),
                ('transactionDateTime', stationspinner.libs.fields.DateTimeField(null=True)),
                ('clientName', models.CharField(max_length=255, null=True, blank=True)),
                ('transactionType', models.CharField(max_length=255, null=True, blank=True)),
                ('owner', models.ForeignKey(to='corporation.CorporationSheet')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.AlterUniqueTogether(
            name='walletdivision',
            unique_together=set([('accountKey', 'owner')]),
        ),
        migrations.AlterUniqueTogether(
            name='starbase',
            unique_together=set([('itemID', 'owner')]),
        ),
        migrations.AlterUniqueTogether(
            name='outpostservice',
            unique_together=set([('outpost', 'serviceName', 'owner')]),
        ),
        migrations.AlterUniqueTogether(
            name='outpost',
            unique_together=set([('stationID', 'owner')]),
        ),
        migrations.AlterUniqueTogether(
            name='npcstanding',
            unique_together=set([('fromID', 'owner')]),
        ),
        migrations.AlterUniqueTogether(
            name='membermedal',
            unique_together=set([('medalID', 'owner')]),
        ),
        migrations.AlterUniqueTogether(
            name='medal',
            unique_together=set([('medalID', 'owner')]),
        ),
        migrations.AlterUniqueTogether(
            name='facilities',
            unique_together=set([('facilityID', 'owner')]),
        ),
        migrations.AlterUniqueTogether(
            name='division',
            unique_together=set([('accountKey', 'owner')]),
        ),
        migrations.AddField(
            model_name='contractitem',
            name='owner',
            field=models.ForeignKey(to='corporation.CorporationSheet'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='contractitem',
            unique_together=set([('contract', 'owner', 'rowID')]),
        ),
        migrations.AddField(
            model_name='contractbid',
            name='owner',
            field=models.ForeignKey(to='corporation.CorporationSheet'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='contractbid',
            unique_together=set([('bidID', 'contractID', 'owner')]),
        ),
        migrations.AddField(
            model_name='contract',
            name='owner',
            field=models.ForeignKey(to='corporation.CorporationSheet'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='containerlog',
            name='owner',
            field=models.ForeignKey(to='corporation.CorporationSheet'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='contact',
            name='owner',
            field=models.ForeignKey(to='corporation.CorporationSheet'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='blueprint',
            name='owner',
            field=models.ForeignKey(to='corporation.CorporationSheet'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='blueprint',
            unique_together=set([('itemID', 'owner')]),
        ),
        migrations.AddField(
            model_name='assetlist',
            name='owner',
            field=models.ForeignKey(to='corporation.CorporationSheet'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='accountbalance',
            name='owner',
            field=models.ForeignKey(to='corporation.CorporationSheet'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='accountbalance',
            unique_together=set([('accountID', 'owner')]),
        ),
    ]
